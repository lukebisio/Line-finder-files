# NEW PrepareData
# Author: Larry Donahue, Daniel Nykamp
# This program scrapes coherence data generated by fscans in order to provide data for
# the Linefinder Interface located at https://github.com/donahuel/linefinder-interface to use.
# This program is intended for use on the LIGO clusters, and lives there.
# This combines what used to be CoherenceGrabber.py, Mr.Snippy.py, and PlotRenamer.py

import os
import subprocess
import time

# Define root directory
ROOT_DIR = os.getcwd()

SNIP_THRESHOLD = 0.95

def scrape(frame, desired_type, observatory):
        # Example: copy_from = /home/pulsar/public_html/fscan/H1/monthly/H1Fscan_coherence/H1Fscan_coherence
        copy_from = os.path.join("/home/pulsar/public_html/fscan", observatory, frame, observatory + "Fscan_coherence", observatory + "Fscan_coherence")

        if desired_type == ".png":
                copy_to_root = os.path.join(ROOT_DIR, "plots", frame, observatory)
        else:
                copy_to_root = os.path.join(ROOT_DIR, "data", frame, observatory)

        print("Scraping " + desired_type + " files from " + copy_from + " into " + copy_to_root)

        filecount = 0
        fscans_dirs_len = len(os.listdir(copy_from))

        for i, fscans_dir in enumerate(os.scandir(copy_from)):
                if not fscans_dir.is_dir() or fscans_dir.name == "comparisonFscans":
                        continue # Ignore this directory

                copy_to_fscans_dir = fscans_dir.name
                if desired_type == ".png":
                        copy_to_fscans_dir = convert_plot_fscan_name(copy_to_fscans_dir)

                progress = round(100 * float(i) / fscans_dirs_len, 1)
                print(str(progress) + "% " + fscans_dir.path)

                for channel_dir in os.scandir(fscans_dir.path):
                        if not channel_dir.is_dir() or channel_dir.name == "H1_GDS-CALIB_STRAIN":
                                continue # Ignore the H1_GDS-CALIB_STRAIN channel

                        copy_to_dir = os.path.join(copy_to_root, copy_to_fscans_dir, channel_dir.name)
                        os.makedirs(copy_to_dir)

                        # print("Scraping " + channel_dir.path)

                        for file in os.scandir(channel_dir.path):
                                if not file.name.endswith(desired_type) or file.name.split("_")[4] != "coherence":
                                        continue # Ignore the wrong types and names of files
                                # Ex: spec_700.00_800.00_1237940047_coherence_H1_PEM-EY_MAG_EBAY_SEIRACK_Z_DQ_and_H1_GDS-CALIB_STRAIN.txt

                                new_file_name = file.name
                                if desired_type == ".png":
                                        new_file_name = convert_plot_file_name(new_file_name)

                                new_file_path = os.path.join(copy_to_dir, new_file_name)

                                if desired_type == ".png":
                                        # Simply copy .png files
                                        subprocess.call(["rsync", file.path, new_file_path])
                                else:
                                        # Filter .txt files for significant lines
                                        copy_from_file = open(file.path, "r")
                                        sig_lines = [l for l in copy_from_file if float(l.split()[1]) > SNIP_THRESHOLD]
                                        copy_from_file.close()

                                        new_file = open(new_file_path, "w")
                                        new_file.writelines(sig_lines)
                                        filecount += 1

        print("Scraped and copied " + str(filecount) + " coherence files into " + copy_to_root)

def convert_plot_file_name(name):
        fileparts = name.split("_")
        return fileparts[0] + "_" + fileparts[1] + "_" + fileparts[2] + ".png"

def convert_plot_fscan_name(name):
        name_parts = name.split("_")
        return "plots_" + name_parts[1] + "_" + name_parts[2] + "_" + name_parts[3]

def prompt_user(question, dictionary):
        while True:
                user_input = input(question).lower()
                if user_input in dictionary:
                        return dictionary[user_input]
                print("Invalid character.")

if __name__ == "__main__":
        if os.path.isdir("data"):
                print("The data directory already exists: rm -r data")
                exit()
        if os.path.isdir("plots"):
                print("The plots directory already exists: rm -r plots")
                exit()

        obs = prompt_user("Is this Hanford (H) or Livingston (L)? (H/L): ", dict(h = "H1", l = "L1"))

        start_time = time.time()

        scrape("weekly", ".txt", obs)
        scrape("weekly", ".png", obs)
        scrape("monthly", ".txt", obs)
        scrape("monthly", ".png", obs)

        elapsed_time = time.time() - start_time
        print("Scraping finished in " + str(elapsed_time))
